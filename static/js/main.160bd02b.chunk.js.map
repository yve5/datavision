{"version":3,"sources":["Features/Bar/Bar.js","Features/Chart/Chart.js","config/constants.js","App.js","serviceWorker.js","index.js"],"names":["Bar","react_default","a","createElement","className","this","props","time","data","style","width","left","average","Component","Chart","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","options","value","description","family","records","start","Date","end","min","max","handleChange","bind","assertThisInitialized","handleRecords","onStartTimeChange","onEndTimeChange","prevProps","prevState","event","setState","target","newDate","results","metrics","forEach","element","pieces","split","eltDate","push","smallest","largest","barAverage","count","smallestElement","largestElement","realAverage","length","result","toFixed","Math","round","alert","_this2","onChange","map","option","index","key","es","selected","dateFormat","timeIntervals","minDate","maxDate","showTimeSelect","record","Features_Bar_Bar","App","Features_Chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.160bd02b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Bar.scss';\n\nclass Bar extends Component {\n  render() {\n    return (\n      <div className=\"Bar\">\n        <div className=\"Bar__time\">{ this.props.time }</div>\n        <div className=\"Bar__data\">\n          { this.props.data }\n          <span className=\"Bar__block\" style={{ 'width': this.props.width + '%' }}></span>\n          <span className=\"Bar__average\" style={{ 'left': this.props.average + '%' }}></span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Bar;","import React, { Component } from 'react';\nimport './Chart.scss';\nimport Bar from '../Bar/Bar';\nimport metrics from '../../config/metrics.json';\nimport { SMALLEST_PERCENTAGE } from '../../config/constants';\n\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [\n        { 'value': 'files', 'description': 'number of files' },\n        { 'value': 'inodes', 'description': 'number of inodes' },\n        { 'value': 'recv', 'description': 'network > bytes received (bytes)' },\n        { 'value': 'send', 'description': 'network > bytes sended (bytes)' },\n        { 'value': 'used', 'description': 'memory usage > used (bytes)' },\n        { 'value': 'buff', 'description': 'memory usage > buff (bytes)' },\n        { 'value': 'cach', 'description': 'memory usage > cach (bytes)' },\n        { 'value': 'free', 'description': 'memory usage > free (bytes)' },\n        { 'value': 'usr', 'description': 'total cpu usage > usr (percentage)' },\n        { 'value': 'sys', 'description': 'total cpu usage > sys (percentage)' },\n        { 'value': 'idl', 'description': 'total cpu usage > idl (percentage)' },\n        { 'value': 'wai', 'description': 'total cpu usage > wai (percentage)' },\n        { 'value': 'hiq', 'description': 'total cpu usage > hiq (percentage)' },\n        { 'value': 'siq', 'description': 'total cpu usage > siq (percentage)' },\n        { 'value': 'read', 'description': 'read bytes on disk' },\n        { 'value': 'writ', 'description': 'write bytes on disk' },\n        { 'value': '1m', 'description': 'load average > for last minute (percentage)' },\n        { 'value': '5m', 'description': 'load average > for last 5 minutes (percentage)' },\n        { 'value': '15m', 'description': 'load average > for last 15 minutes (percentage)' },\n      ],\n      family: 'files',\n      records: [],\n      start: new Date(2019, 2, 16, 10, 0, 0),\n      end: new Date(2019, 2, 16, 13, 0, 0),\n      min: {},\n      max: {},\n      average: null,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRecords = this.handleRecords.bind(this);\n    this.onStartTimeChange = this.onStartTimeChange.bind(this);\n    this.onEndTimeChange = this.onEndTimeChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleRecords();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.family !== this.state.family \n        || prevState.start !== this.state.start \n        || prevState.end !== this.state.end) {\n      this.handleRecords();\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ family: event.target.value });\n  }\n\n  onStartTimeChange(newDate) {\n    this.setState({ start: new Date(newDate) });\n  }\n\n  onEndTimeChange(newDate) {\n    this.setState({ end: new Date(newDate) });\n  }\n\n  handleRecords() {\n    let results = [];\n    let start = new Date(this.state.start);\n    let end = new Date(this.state.end);\n    let family = this.state.family;\n\n    metrics.forEach(element => {\n      if (element.time) {\n        element.width = 70;\n      \n        let pieces = element.time.split(' ');\n        pieces = pieces[1].split(':');\n        \n        let eltDate = new Date(2019, 2, 16, pieces[0], pieces[1], pieces[2]);\n        \n        if (eltDate >= start && eltDate <= end) {\n          results.push(element);\n        }\n      }\n    });\n    \n    // Smallest, largest, average\n    let smallestElement = {};\n    let largestElement = {};\n    let realAverage = null;\n\n    if (results.length) {\n      let smallest;\n      let largest;\n      let barAverage;\n      let count;\n\n      smallest = largest = results[0][family];\n      smallestElement = largestElement = results[0];\n      barAverage = 0;\n      count = 0;\n      \n      results.forEach(result => {\n        // In case of missing records\n        if (typeof result[family] !== 'undefined') {\n          if (smallest > result[family]) {\n            smallest = result[family];\n            smallestElement = result;\n          }\n          \n          if (largest < result[family]) {\n            largest = result[family];\n            largestElement = result;\n          }\n\n          barAverage += result[family];\n          count++;\n        }\n      });\n\n      // Average calculation\n      realAverage = barAverage.toFixed(3) / count;\n      realAverage = realAverage.toFixed(3);\n\n      if (smallest !== largest) {\n        barAverage = (100 - SMALLEST_PERCENTAGE) * (realAverage - smallest);\n        barAverage /= (largest - smallest);\n        barAverage = (barAverage + SMALLEST_PERCENTAGE) * 100 / 100;\n        barAverage = Math.round(barAverage);\n      }\n\n      // Width calculation\n      results.forEach(result => {\n        result.width = 0;\n\n        if (smallest !== largest) {\n          result.width = (100 - SMALLEST_PERCENTAGE) * (result[family] - smallest);\n          result.width /= (largest - smallest);\n          result.width = (result.width + SMALLEST_PERCENTAGE) * 100 / 100;\n          result.width = Math.round(result.width);\n        }\n\n        result.average = barAverage;\n      });\n    }\n\n    this.setState({\n      records: results,\n      min: smallestElement,\n      max: largestElement,\n      average: realAverage,\n    });\n  }\n  \n  render() {\n    let alert;\n\n    if (this.state.records.length) {\n      alert = <div className=\"Alert\">\n                <div className=\"Alert__item\">\n                  Min value: {this.state.min[this.state.family]}<br/>\n                  {this.state.min.time}\n                </div>\n                <div className=\"Alert__item\">\n                  Max value: {this.state.max[this.state.family]}<br/>\n                  {this.state.max.time}\n                </div>\n                <div className=\"Alert__item\">\n                  Average: {this.state.average}\n                </div>\n              </div>;\n    }\n    \n    return (\n      <div>\n        <h1>Metrics</h1>\n\n        <nav className=\"Nav\">\n          <div className=\"Nav__item\">\n            <select onChange={this.handleChange} value={this.state.family}>\n              {this.state.options.map((option, index) => {\n                return <option value={option.value} key={index}>\n                  {option.description}\n                </option>\n              })}\n            </select>\n          </div>\n          \n          <div className=\"Nav__item\">\n            <DatePicker\n              selected={this.state.start}\n              onChange={this.onStartTimeChange}\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              timeIntervals={10}\n              minDate={new Date(2019, 2, 16, 10)}\n              maxDate={new Date(2019, 2, 16, 10)}\n              showTimeSelect\n            />\n          </div>\n\n          <div className=\"Nav__item\">\n            <DatePicker\n              selected={this.state.end}\n              onChange={this.onEndTimeChange}\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              timeIntervals={10}\n              minDate={new Date(2019, 2, 16, 10)}\n              maxDate={new Date(2019, 2, 16, 10)}\n              showTimeSelect\n            />\n          </div>\n        </nav>\n\n        {alert}\n\n        <div className=\"Chart\">\n          {this.state.records.map((record, index) => {\n            return <Bar key={index}\n                        time={record.time}\n                        data={record[this.state.family]}\n                        average={record.average}\n                        width={record.width} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chart;","export const SMALLEST_PERCENTAGE = 1;\nexport const HOUR_RANGE_START = 10;\nexport const HOUR_RANGE_END = 15;\nexport const SEC_MIN_RANGE_START = 0;\nexport const SEC_MIN_RANGE_END = 60;","import React, { Component } from 'react';\nimport './App.scss';\nimport Chart from './Features/Chart/Chart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart></Chart>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
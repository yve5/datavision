{"version":3,"sources":["config/constants.js","Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["SELECT_OPTIONS","value","description","Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","labels","data","family","start","Date","end","min","max","average","dateError","handleChange","bind","assertThisInitialized","handleRecords","onStartTimeChange","onEndTimeChange","prevProps","prevState","setState","event","target","newDate","_this2","results","metrics","forEach","element","time","width","pieces","split","eltDate","push","smallest","largest","barAverage","count","smallestElement","largestElement","realAverage","length","result","toFixed","Alert","react_default","a","createElement","className","chartData","datasets","label","substr","toUpperCase","toLowerCase","backgroundColor","borderColor","borderWidth","x","y","borderDash","onChange","map","option","index","key","es","selected","dateFormat","timeIntervals","minDate","maxDate","showTimeSelect","react_chartjs_2_es","height","Component","App","src_Chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3be7878.chunk.js","sourcesContent":["export const HOUR_RANGE_START = 10;\nexport const HOUR_RANGE_END = 15;\nexport const SEC_MIN_RANGE_START = 0;\nexport const SEC_MIN_RANGE_END = 60;\nexport const DATEPICKER_TIME_INTERVALS = 5;\nexport const SELECT_OPTIONS = [\n  { 'value': 'files', 'description': 'number of files' },\n  { 'value': 'inodes', 'description': 'number of inodes' },\n  { 'value': 'recv', 'description': 'network > bytes received (bytes)' },\n  { 'value': 'send', 'description': 'network > bytes sended (bytes)' },\n  { 'value': 'used', 'description': 'memory usage > used (bytes)' },\n  { 'value': 'buff', 'description': 'memory usage > buff (bytes)' },\n  { 'value': 'cach', 'description': 'memory usage > cach (bytes)' },\n  { 'value': 'free', 'description': 'memory usage > free (bytes)' },\n  { 'value': 'usr', 'description': 'total cpu usage > usr (percentage)' },\n  { 'value': 'sys', 'description': 'total cpu usage > sys (percentage)' },\n  { 'value': 'idl', 'description': 'total cpu usage > idl (percentage)' },\n  { 'value': 'wai', 'description': 'total cpu usage > wai (percentage)' },\n  { 'value': 'hiq', 'description': 'total cpu usage > hiq (percentage)' },\n  { 'value': 'siq', 'description': 'total cpu usage > siq (percentage)' },\n  { 'value': 'read', 'description': 'read bytes on disk' },\n  { 'value': 'writ', 'description': 'write bytes on disk' },\n  { 'value': '1m', 'description': 'load average > for last minute (percentage)' },\n  { 'value': '5m', 'description': 'load average > for last 5 minutes (percentage)' },\n  { 'value': '15m', 'description': 'load average > for last 15 minutes (percentage)' },\n];","import React, { Component } from 'react';\nimport './Chart.scss';\nimport metrics from '../config/metrics.json';\nimport { DATEPICKER_TIME_INTERVALS, SELECT_OPTIONS } from '../config/constants';\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Line } from 'react-chartjs-2';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      labels: [],\n      data: [],\n      family: SELECT_OPTIONS[0]['value'],\n      start: new Date(2019, 2, 16, 10, 0, 0),\n      end: new Date(2019, 2, 16, 13, 0, 0),\n      min: {},\n      max: {},\n      average: null,\n      dateError: false,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRecords = this.handleRecords.bind(this);\n    this.onStartTimeChange = this.onStartTimeChange.bind(this);\n    this.onEndTimeChange = this.onEndTimeChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleRecords();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.start !== this.state.start || prevState.end !== this.state.end) {\n      if (this.state.start > this.state.end && prevState.start !== this.state.start) {\n        this.setState({ start: prevState.start });\n      }\n      else if (this.state.start > this.state.end && prevState.end !== this.state.end) {\n        this.setState({ end: prevState.end });\n      }\n\n      this.handleRecords();\n    }\n\n    if (prevState.family !== this.state.family) {\n      this.handleRecords();\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ family: event.target.value });\n  }\n\n  onStartTimeChange(newDate) {\n    this.setState({ start: new Date(newDate) });\n  }\n\n  onEndTimeChange(newDate) {\n    this.setState({ end: new Date(newDate) });\n  }\n\n  handleRecords() {\n    let results = [];\n    let start = new Date(this.state.start);\n    let end = new Date(this.state.end);\n    let family = this.state.family;\n\n    let labels = [];\n    let data = [];\n\n    metrics.forEach(element => {\n      if (element.time) {\n        element.width = 70;\n      \n        let pieces = element.time.split(' ');\n        pieces = pieces[1].split(':');\n        \n        let eltDate = new Date(2019, 2, 16, pieces[0], pieces[1], pieces[2]);\n        \n        if (eltDate >= start && eltDate <= end) {\n          results.push(element);\n          labels.push(element.time);\n          data.push(element[this.state.family]);\n        }\n      }\n    });\n    \n    // Smallest, largest, average\n    let smallestElement = {};\n    let largestElement = {};\n    let realAverage = null;\n\n    if (results.length) {\n      let smallest;\n      let largest;\n      let barAverage;\n      let count;\n\n      smallest = largest = results[0][family];\n      smallestElement = largestElement = results[0];\n      barAverage = 0;\n      count = 0;\n      \n      results.forEach(result => {\n        // In case of missing records\n        if (typeof result[family] !== 'undefined') {\n          if (smallest > result[family]) {\n            smallest = result[family];\n            smallestElement = result;\n          }\n          \n          if (largest < result[family]) {\n            largest = result[family];\n            largestElement = result;\n          }\n\n          barAverage += result[family];\n          count++;\n        }\n      });\n\n      // Average calculation\n      realAverage = barAverage.toFixed(3) / count;\n      realAverage = realAverage.toFixed(3);\n    }\n\n    this.setState({\n      labels: labels,\n      data: data,\n      min: smallestElement,\n      max: largestElement,\n      average: realAverage,\n    });\n  }\n  \n  render() {\n    let Alert;\n\n    if (this.state.labels.length) {\n      Alert = <div className=\"Alert\">\n                <div className=\"Alert__item\">\n                  Min value: {this.state.min[this.state.family]}<br/>\n                  {this.state.min.time}\n                </div>\n                <div className=\"Alert__item\">\n                  Max value: {this.state.max[this.state.family]}<br/>\n                  {this.state.max.time}\n                </div>\n                <div className=\"Alert__item\">\n                  Average: {this.state.average}\n                </div>\n              </div>;\n    }\n\n    let chartData = {\n      labels: this.state.labels,\n      datasets: [\n        {\n          label: this.state.family.substr(0,1).toUpperCase() + this.state.family.substr(1).toLowerCase(),\n          data: this.state.data,\n          backgroundColor: 'rgba(84, 84, 255, 0.2)',\n          borderColor: 'rgba(84, 84, 255, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Average',\n          data: [\n            {x: this.state.labels[0], y: this.state.average},\n            {x: this.state.labels[this.state.labels.length - 1], y: this.state.average},\n          ],\n          backgroundColor: 'rgba(0, 0, 0, 0)',\n          borderColor: 'rgba(255, 0, 0, 1)',\n          borderWidth: 2,\n          borderDash: [5, 5],\n        }\n      ],\n    };\n    \n    return (\n      <div>\n        <h1>Metrics</h1>\n\n        <nav className=\"Nav\">\n          <div className=\"Nav__item\">\n            <select onChange={this.handleChange} value={this.state.family}>\n              {SELECT_OPTIONS.map((option, index) => {\n                return <option value={option.value} key={index}>\n                  {option.description}\n                </option>\n              })}\n            </select>\n          </div>\n          \n          <div className=\"Nav__item\">\n            <DatePicker\n              selected={this.state.start}\n              onChange={this.onStartTimeChange}\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              timeIntervals={DATEPICKER_TIME_INTERVALS}\n              minDate={new Date(2019, 2, 16, 10)}\n              maxDate={new Date(2019, 2, 16, 10)}\n              showTimeSelect\n            />\n          </div>\n\n          <div className=\"Nav__item\">\n            <DatePicker\n              selected={this.state.end}\n              onChange={this.onEndTimeChange}\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              timeIntervals={DATEPICKER_TIME_INTERVALS}\n              minDate={new Date(2019, 2, 16, 10)}\n              maxDate={new Date(2019, 2, 16, 10)}\n              showTimeSelect\n            />\n          </div>\n        </nav>\n\n        {Alert}\n\n        <Line \n          data={chartData} \n          width={100}\n          height={50}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.scss';\nimport Chart from './Chart/Chart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart></Chart>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}